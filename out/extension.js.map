{
  "version": 3,
  "sources": ["../src/extension.ts", "../src/login/LoginPanel.ts", "../src/utilities/getUri.ts", "../src/utilities/getNonce.ts", "../src/enumerators.ts", "../src/preReq/installOps.ts"],
  "sourcesContent": ["import * as vscode from \"vscode\";\nimport { LoginPanel } from \"./login/LoginPanel\";\nimport { CliCommands } from \"./enumerators\";\nimport { execSync } from \"child_process\";\nimport { installOpsFlow } from \"./preReq/installOps\";\n\nlet context: vscode.ExtensionContext;\n\nexport async function activate(ctx: vscode.ExtensionContext) {\n  try {\n    // Necessary for Theia compatibility of welcome screen. See https://github.com/eclipse-theia/theia/issues/9361\n    vscode.window.registerTreeDataProvider(\n      \"command-palette\",\n      new EmptyTreeDataProvider()\n    );\n    await installOpsFlow();\n    context = ctx;\n    if (!isLoggedIn()) {\n      LoginPanel.render(handleLogin, context.extensionUri);\n    }\n\n    Object.entries(CliCommands).forEach(([name, command]) =>\n      context.subscriptions.push(\n        vscode.commands.registerCommand(`ops.${name.toLowerCase()}`, () => {\n          if (!isLoggedIn()) {\n            LoginPanel.render(handleLogin, context.extensionUri);\n            return;\n          }\n          launchTerminal(command);\n        })\n      )\n    );\n\n    context.subscriptions.push(\n      vscode.commands.registerCommand(\"ops.login\", () => {\n        LoginPanel.render(handleLogin, context.extensionUri);\n      })\n    );\n  } catch (error: any) {\n    printError(error);\n    throw error;\n  }\n}\n\nfunction isLoggedIn(): boolean {\n  try {\n    execSync(\"ops -wsk namespace list\");\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n\nfunction handleLogin(username: string, password: string, apiHost: string) {\n  const loginOutput = vscode.window.createOutputChannel(\"Ops Login\");\n\n  loginOutput.show();\n  try {\n    loginOutput.appendLine(\"Launching login script...\");\n\n    const execLogin = execSync(\n      `ops ide login \"${username}\" \"${\n        apiHost.endsWith(\"/\") ? apiHost.slice(0, -1) : apiHost\n      }\"`,\n      {\n        env: { ...process.env, OPS_PASSWORD: password },\n      }\n    );\n\n    loginOutput.appendLine(execLogin.toString());\n    printInfo(\n      \"You successfully logged in. You can now use the ops command palette.\"\n    );\n  } catch (error: any) {\n    loginOutput.appendLine(error);\n    printError(\n      \"An error occurred in the login process. Check the output window for further details.\"\n    );\n    throw error;\n  }\n}\n\nfunction launchTerminal(command: string): void {\n  try {\n    const terminal = vscode.window.createTerminal(\"Ops Terminal\");\n    terminal.show();\n    terminal.sendText(command, true);\n  } catch (error) {\n    printError(error);\n    throw error;\n  }\n}\n\nfunction printError(error: any) {\n  return vscode.window.showErrorMessage(error.toString());\n}\nfunction printInfo(info: string) {\n  return vscode.window.showInformationMessage(info);\n}\n\nexport function deactivate() {}\n\n// Necessary for Theia compatibility of welcome screen. See https://github.com/eclipse-theia/theia/issues/9361\nexport class EmptyTreeDataProvider implements vscode.TreeDataProvider<any> {\n  constructor() {}\n\n  getTreeItem(element: any): vscode.TreeItem {\n    return {};\n  }\n\n  getChildren(element?: any): Thenable<any[]> {\n    return new Promise((resolve) => resolve([]));\n  }\n}\n", "import * as vscode from \"vscode\";\nimport { getUri } from \"../utilities/getUri\";\nimport { getNonce } from \"../utilities/getNonce\";\n\nexport class LoginPanel {\n  public static currentPanel: LoginPanel | undefined;\n  private readonly _panel: vscode.WebviewPanel;\n  private _disposables: vscode.Disposable[] = [];\n\n  private constructor(panel: vscode.WebviewPanel, extensionUri: vscode.Uri) {\n    this._panel = panel;\n    this._panel.onDidDispose(() => this.dispose(), null, this._disposables);\n    this._panel.webview.html = this._getWebviewContent(\n      this._panel.webview,\n      extensionUri\n    );\n    this._setWebviewMessageListener(this._panel.webview);\n  }\n  private _setWebviewMessageListener(webview: vscode.Webview) {\n    webview.onDidReceiveMessage(\n      (message: any) => {\n        const command = message.command;\n\n        switch (command) {\n          case \"login\":\n            // Handle login form submission\n            const { username, password, apiHost } = message;\n            // Pass the login details back to the extension\n            if (this._onLoginCallback && username && password && apiHost) {\n              this._onLoginCallback(username, password, apiHost);\n            }\n            break;\n        }\n      },\n      undefined,\n      this._disposables\n    );\n  }\n  private _getWebviewContent(\n    webview: vscode.Webview,\n    extensionUri: vscode.Uri\n  ) {\n    const webviewUri = getUri(webview, extensionUri, [\"out\", \"login.js\"]);\n    // const logoUri =\n    //   \"https://ops-aws-s3-bucket.s3.eu-west-1.amazonaws.com/os-logo-full-horizontal-transparent.png\";\n    const logoUri = webview.asWebviewUri(\n      vscode.Uri.joinPath(extensionUri, \"media\", \"logoFull.png\")\n    );\n\n    const nonce = getNonce();\n    return /*html*/ `\n   <!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>OPS - Login!</title>\n    <style>\n        body {\n          font-family: Arial, sans-serif;\n          background-color: transparent;\n          padding: 20px;\n          \n        }\n        .login-container {\n            border-radius: 10px;\n          max-width: 400px;\n          margin: 0 auto;\n          background-color: #276089;\n          padding: 20px;\n          box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        \n        }\n        .login-container h2 {\n          text-align: center;\n        }\n        .login-form {\n          display: flex;\n          flex-direction: column;\n        }\n        .login-form input {\n            border-radius: 10px;\n          margin-bottom: 10px;\n          padding: 10px;\n          border: 1px solid #ccc;\n        }\n        \n        .login-form vscode-button {\n            margin: 0 auto;\n          width: 100px;\n          border-radius: 10px;\n          padding: 10px;\n          background-color: #00AD83;\n          text-align: center;\n          color: #fff;\n          border: none;\n          cursor: pointer;\n          font-weight: bolder;\n        }\n        .logo-img {\n            border-radius: 10px;;\n          background-color: white;\n        }\n        .input-error {\n          border: 2px solid red !important;\n        }\n        .input-success {\n          border: 2px solid #00AD83 !important;\n        }\n        .error-message {\n          color: #ffa944;\n          font-size: 0.8em;\n          font-weight: 900;\n        }\n        \n\n\n      </style>\n  </head>\n  <body> \n    <div class=\"login-container\">\n    <img src=\"${logoUri}\" class=\"logo-img\"></img>\n    <h2>Login</h2>\n    <form class=\"login-form\" id=\"login-form\">\n      <input type=\"text\" id=\"username-input\" name=\"username\" placeholder=\"Username\" autocomplete=\"username\">\n      <input type=\"password\" id=\"password-input\" name=\"password\" placeholder=\"Password\" autocomplete=\"current-password\">\n     \n        <input type=\"text\" id=\"api-host-input\" name=\"apiHost\" placeholder=\"API Host URL\" value=\"https://openserverless.dev\">\n    \n      <vscode-button id=\"login-button\" type=\"submit\"> L O G I N </vscode-button>\n    \n    </form>\n   \n    <script type=\"module\" nonce=\"${nonce}\" src=\"${webviewUri}\"></script>\n  </body>\n</html>\n    `;\n  }\n\n  private _onLoginCallback:\n    | ((username: string, password: string, apiHost: string) => void)\n    | undefined;\n  public static render(\n    onLogin: (username: string, password: string, apiHost: string) => void,\n    extensionUri: vscode.Uri\n  ) {\n    if (LoginPanel.currentPanel) {\n      LoginPanel.currentPanel._panel.reveal(vscode.ViewColumn.One);\n    } else {\n      const panel = vscode.window.createWebviewPanel(\n        \"login-panel\",\n        \"Login\",\n        vscode.ViewColumn.One,\n        {\n          enableScripts: true,\n          // Restrict the webview to only load resources from the `out` and `media` directory\n          localResourceRoots: [\n            vscode.Uri.joinPath(extensionUri, \"out\"),\n            vscode.Uri.joinPath(extensionUri, \"media\"),\n          ],\n        }\n      );\n      LoginPanel.currentPanel = new LoginPanel(panel, extensionUri);\n    }\n    LoginPanel.currentPanel._onLoginCallback = onLogin;\n  }\n\n  public dispose() {\n    LoginPanel.currentPanel = undefined;\n    this._panel.dispose();\n    while (this._disposables.length) {\n      const disposable = this._disposables.pop();\n      if (disposable) {\n        disposable.dispose();\n      }\n    }\n  }\n}\n", "import { Uri, Webview } from \"vscode\";\n\nexport function getUri(webview: Webview, extensionUri: Uri, pathList: string[]) {\n  return webview.asWebviewUri(Uri.joinPath(extensionUri, ...pathList));\n}", "export function getNonce() {\n    let text = \"\";\n    const possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for (let i = 0; i < 32; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n  }", "export enum CliCommands {\n  Devel = \"ops ide devel\",\n  Deploy = \"ops ide deploy\",\n}\n\nexport enum LoginPageIDs {\n  Username = \"username-input\",\n  Password = \"password-input\",\n  ApiHost = \"api-host-input\",\n  LoginButton = \"login-button\",\n}\n", "import * as vscode from \"vscode\";\nimport { exec } from \"child_process\";\nimport { platform } from \"os\";\nimport path = require(\"path\");\nimport * as fs from \"fs\";\nimport * as os from \"os\";\n\nconst outputChannel = vscode.window.createOutputChannel(\"Ops Installer\");\n\nconst runCommand = (command: string, firstCommand?: boolean): Promise<void> => {\n  return new Promise<void>((resolve, reject) => {\n    exec(command, (error, stdout, stderr) => {\n      if (error) {\n        if (firstCommand) {\n          outputChannel.appendLine(`Oooops! Ops is not installed :)`);\n        } else {\n          outputChannel.appendLine(`Error executing command: ${stderr}`);\n        }\n        reject(stderr);\n        return;\n      }\n      outputChannel.appendLine(stdout);\n      resolve();\n    });\n  });\n};\n\nexport const installOpsFlow = async () => {\n  outputChannel.show();\n  outputChannel.appendLine(`Going to install ops!`);\n  const osType = platform();\n  const isOpsInstalled = await checkIfOpsIsAlreadyInstalled(osType);\n\n  if (!isOpsInstalled) {\n    try {\n      await installOps(osType);\n      await configureOpsBranch();\n    } catch (error) {\n      outputChannel.appendLine(`An error occurred: ${error}`);\n    }\n    vscode.window.showInformationMessage(\n      \"Installation complete. Please restart your terminal.\"\n    );\n  } else {\n    outputChannel.appendLine(\"Ops has already been installed!\");\n    await configureOpsBranch();\n  }\n};\n\nconst checkIfOpsIsAlreadyInstalled = async (\n  osType: string\n): Promise<boolean> => {\n  try {\n    let command: string;\n    if (osType === \"linux\" || osType === \"darwin\") {\n      command = \"which ops\";\n    } else if (osType === \"win32\") {\n      command = \"where ops\";\n    } else {\n      return false;\n    }\n\n    await runCommand(command, true);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nconst configureOpsBranch = async () => {\n  try {\n    const osType = platform();\n    let setBranchCommand = \"\";\n\n    if (osType === \"linux\" || osType === \"darwin\") {\n      const homeDir = os.homedir();\n      const bashrcPath = path.join(homeDir, \".bashrc\");\n      const zshrcPath = path.join(homeDir, \".zshrc\");\n\n      if (fs.existsSync(bashrcPath)) {\n        await runCommand(`echo 'export OPS_BRANCH=main' >> ${bashrcPath}`);\n      } else if (fs.existsSync(zshrcPath)) {\n        await runCommand(`echo 'export OPS_BRANCH=main' >> ${zshrcPath}`);\n      } else {\n        outputChannel.appendLine(\"No .bashrc or .zshrc found.\");\n      }\n\n      setBranchCommand = \"export OPS_BRANCH=main && ops -update\";\n    } else if (osType === \"win32\") {\n      setBranchCommand =\n        '[System.Environment]::SetEnvironmentVariable(\"OPS_BRANCH\", \"main\", \"User\"); ops -update';\n    }\n\n    await runCommand(setBranchCommand);\n    outputChannel.appendLine(\"Ops branch set to main and ops updated!\");\n  } catch (error) {\n    outputChannel.appendLine(`Failed to set OPS_BRANCH: ${error}`);\n  }\n};\n\nasync function installOpsOnMac() {\n  try {\n    await runCommand(\"curl -sL bit.ly/get-ops -o ~/get-ops.sh\");\n    await runCommand(\"chmod +x ~/get-ops.sh\");\n    await runCommand(\"sh ~/get-ops.sh\");\n\n    const opsPath = path.join(os.homedir(), \".local/bin/ops\");\n    if (fs.existsSync(opsPath)) {\n      outputChannel.appendLine(\"Ops installed successfully on MAC OS.\");\n    } else {\n      throw new Error(\"Ops not present on .local/bin path\");\n    }\n  } catch (error) {\n    outputChannel.appendLine(`Installation failed on MAC OS: ${error}`);\n  }\n}\n\nasync function installOpsOnWindows() {\n  try {\n    await runCommand('powershell.exe -Command \"irm bit.ly/get-ops-exe | iex\"');\n    const opsPath = path.join(os.homedir(), \".local/bin/ops.exe\");\n    if (fs.existsSync(opsPath)) {\n      outputChannel.appendLine(\"Ops installed successfully on Windows.\");\n    } else {\n      throw new Error(\"Ops not present on .local/bin path\");\n    }\n  } catch (error) {\n    outputChannel.appendLine(`Installation failed on Windows: ${error}`);\n  }\n}\n\nasync function installOpsOnLinux() {\n  try {\n    await runCommand(\"curl -sL bit.ly/get-ops -o ~/get-ops.sh\");\n    await runCommand(\"chmod +x ~/get-ops.sh\");\n    await runCommand(\"sh ~/get-ops.sh\");\n\n    const opsPath = path.join(os.homedir(), \".local/bin/ops\");\n    if (fs.existsSync(opsPath)) {\n      outputChannel.appendLine(\"Ops installed successfully on Linux.\");\n    } else {\n      throw new Error(\"Ops not present on .local/bin path\");\n    }\n  } catch (error) {\n    outputChannel.appendLine(`Installation failed on Linux: ${error}`);\n  }\n}\n\nasync function installOps(osType: NodeJS.Platform) {\n  if (osType === \"darwin\") {\n    outputChannel.appendLine(\"Installing ops on MAC OS...\");\n    await installOpsOnMac();\n  } else if (osType === \"linux\") {\n    const version = fs.readFileSync(\"/proc/version\", \"utf8\");\n    if (version.includes(\"Microsoft\")) {\n      outputChannel.appendLine(\"Installing ops on WSL...\");\n      await installOpsOnWindows();\n    } else {\n      outputChannel.appendLine(\"Installing ops on Linux...\");\n      await installOpsOnLinux();\n    }\n  } else if (osType === \"win32\") {\n    outputChannel.appendLine(\"Installing ops on Windows...\");\n    await installOpsOnWindows();\n  } else {\n    outputChannel.appendLine(\"Unsupported platform.\");\n  }\n}\n"],
  "mappings": "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",
  "names": ["vscode", "CliCommands", "import_child_process", "vscode"]
}
